(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{297:function(e,t,a){e.exports=a.p+"assets/img/mvc.fa30f5f0.png"},298:function(e,t,a){e.exports=a.p+"assets/img/mvp.132356f3.png"},299:function(e,t,a){e.exports=a.p+"assets/img/mvvm.1cc9f503.png"},330:function(e,t,a){"use strict";a.r(t);var o=a(10),n=Object(o.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"software-design-architecture"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#software-design-architecture"}},[e._v("#")]),e._v(" Software Design Architecture")]),e._v(" "),t("h2",{attrs:{id:"introduction"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[e._v("#")]),e._v(" Introduction")]),e._v(" "),t("p",[e._v("An architectural pattern is a general, reusable resolution."),t("br"),e._v("\nBy following architectural pattern, you would be able to improve system's scalability, performance, and maintainability.")]),e._v(" "),t("h2",{attrs:{id:"mvc-model-view-controller"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mvc-model-view-controller"}},[e._v("#")]),e._v(" MVC (Model - View - Controller)")]),e._v(" "),t("ul",[t("li",[t("p",[t("strong",[e._v("Model")]),e._v(" - This component stores the "),t("span",{staticStyle:{"background-color":"yellow"}},[t("strong",[e._v("application data.")])]),e._v(" It has no knowledge about the interface. The model is responsible for handling the "),t("span",{staticStyle:{"background-color":"yellow"}},[t("strong",[e._v("domain logic(real-world business rules)")])]),e._v(" and communication with the "),t("span",{staticStyle:{"background-color":"yellow"}},[t("strong",[e._v("database and network layers")])]),e._v(".")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("View")]),e._v(" - It is the "),t("span",{staticStyle:{"background-color":"yellow"}},[t("strong",[e._v("UI(User Interface)")])]),e._v(" layer that holds components that are visible on the screen. Moreover, it provides the visualization of the data stored in the Model and offers interaction to the user.")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("Controller")]),e._v(" - This component establishes the relationship between the View and the Model. It contains the "),t("span",{staticStyle:{"background-color":"yellow"}},[t("strong",[e._v("core application logic")])]),e._v(" and gets informed of the "),t("span",{staticStyle:{"background-color":"yellow"}},[t("strong",[e._v("user’s response")])]),e._v(" and updates the Model as per the need.")])])]),e._v(" "),t("h3",{attrs:{id:"strength"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#strength"}},[e._v("#")]),e._v(" Strength")]),e._v(" "),t("ol",[t("li",[t("strong",[e._v("Separation of Concerns")]),e._v(": MVC separates the application into three components, making it easier to manage and maintain.")]),e._v(" "),t("li",[t("strong",[e._v("Widely Adopted")]),e._v(": MVC is a well-known and widely adopted pattern, making it easier for developers to understand and work with existing codebases.")])]),e._v(" "),t("h3",{attrs:{id:"weaknesses"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#weaknesses"}},[e._v("#")]),e._v(" Weaknesses")]),e._v(" "),t("ol",[t("li",[t("strong",[e._v("Complexity")]),e._v(": MVC can become complex, especially in large applications, making it challenging to manage.")]),e._v(" "),t("li",[t("strong",[e._v("Synchronization")]),e._v(": In some cases, synchronization between the Model and View can be difficult to manage.")]),e._v(" "),t("li",[t("strong",[e._v("Tight Coupling")]),e._v(": Views are often tightly coupled to controllers, which can lead to maintenance issues and make it harder to reuse code.")])]),e._v(" "),t("p",[t("img",{attrs:{src:a(297),alt:"An image"}}),e._v(" "),t("br")]),e._v(" "),t("h2",{attrs:{id:"mvp-model-view-presenter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mvp-model-view-presenter"}},[e._v("#")]),e._v(" MVP (Model - View - Presenter)")]),e._v(" "),t("ul",[t("li",[t("p",[t("strong",[e._v("Model")]),e._v(" - Layer for "),t("span",{staticStyle:{"background-color":"yellow"}},[t("strong",[e._v("storing data.")])]),e._v(" It is responsible for handling the "),t("span",{staticStyle:{"background-color":"yellow"}},[t("strong",[e._v("domain logic(real-world business rules)")])]),e._v(" and communication with the "),t("span",{staticStyle:{"background-color":"yellow"}},[t("strong",[e._v("database and network layers.")])])])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("View")]),e._v(" - "),t("span",{staticStyle:{"background-color":"yellow"}},[t("strong",[e._v("UI(User Interface)")])]),e._v(" layer. It provides the visualization of the data and keep a "),t("span",{staticStyle:{"background-color":"yellow"}},[t("strong",[e._v("track of the user’s action")])]),e._v(" in order to notify the Presenter. "),t("br")]),e._v(" "),t("p",[e._v("By Isolating UI Logic, MVP enables the View to focus strictly drawing visuals for cleaner code, testing")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("Presenter")]),e._v(" - "),t("span",{staticStyle:{"background-color":"yellow"}},[t("strong",[e._v("Fetch the data")])]),e._v(" from the model and "),t("span",{staticStyle:{"background-color":"yellow"}},[t("strong",[e._v("applies the UI logic")])]),e._v(" to decide what to display. It "),t("span",{staticStyle:{"background-color":"yellow"}},[t("strong",[e._v("manages the state of the View")])]),e._v(" and takes actions according to the user’s input notification from the View. "),t("br")])])]),e._v(" "),t("h3",{attrs:{id:"strength-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#strength-2"}},[e._v("#")]),e._v(" Strength")]),e._v(" "),t("ol",[t("li",[t("strong",[e._v("Testability")]),e._v(": MVP makes it easier to test the presenter and the view independently, enhancing overall testability.")]),e._v(" "),t("li",[t("strong",[e._v("Reduced Coupling")]),e._v(": Presenters in MVP act as intermediaries between the View and the Model, reducing coupling between these components.")])]),e._v(" "),t("h3",{attrs:{id:"weaknesses-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#weaknesses-2"}},[e._v("#")]),e._v(" Weaknesses")]),e._v(" "),t("ol",[t("li",[t("strong",[e._v("Complexity")]),e._v(": Like MVC, MVP can become complex, especially in large applications.")])]),e._v(" "),t("p",[t("img",{attrs:{src:a(298),alt:"An image"}}),e._v(" "),t("br")]),e._v(" "),t("h2",{attrs:{id:"mvvm-model-view-viewmodel"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mvvm-model-view-viewmodel"}},[e._v("#")]),e._v(" MVVM (Model — View — ViewModel)")]),e._v(" "),t("ul",[t("li",[t("p",[t("strong",[e._v("Model")]),e._v(" - Layer for "),t("span",{staticStyle:{"background-color":"yellow"}},[t("strong",[e._v("storing data.")])]),e._v(" It is responsible for handling the "),t("span",{staticStyle:{"background-color":"yellow"}},[t("strong",[e._v("domain logic(real-world business rules)")])]),e._v(" and communication with the "),t("span",{staticStyle:{"background-color":"yellow"}},[t("strong",[e._v("database and network layers.")])])])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("View")]),e._v(" - The purpose of this layer is to "),t("span",{staticStyle:{"background-color":"yellow"}},[t("strong",[e._v("inform the ViewModel about the user’s action.")])]),e._v(" This layer observes the ViewModel and does not contain any kind of application logic.")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("ViewModel")]),e._v(" - "),t("span",{staticStyle:{"background-color":"yellow"}},[t("strong",[e._v("The logic that binds the data to the view")])]),e._v(" - It is an "),t("span",{staticStyle:{"background-color":"yellow"}},[t("strong",[e._v("abstraction of the view")])]),e._v(" that exposes the data and commands that the view can bind to. The view model does not reference the view, but instead "),t("span",{staticStyle:{"background-color":"yellow"}},[t("strong",[e._v("uses data binding")])]),e._v(" and events to notify the view of any changes.")])])]),e._v(" "),t("h3",{attrs:{id:"strength-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#strength-3"}},[e._v("#")]),e._v(" Strength")]),e._v(" "),t("ol",[t("li",[t("strong",[e._v("Data Binding")]),e._v(": MVVM relies heavily on data binding, which reduces boilerplate code and makes it easier to synchronize the View and the ViewModel.")]),e._v(" "),t("li",[t("strong",[e._v("Loose Coupling")]),e._v(": MVVM reduces coupling between components, as the ViewModel does not directly reference the View.")])]),e._v(" "),t("h3",{attrs:{id:"weaknesses-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#weaknesses-3"}},[e._v("#")]),e._v(" Weaknesses")]),e._v(" "),t("ol",[t("li",[t("strong",[e._v("Performance Overhead")]),e._v(": In some cases, data binding and reactive programming may introduce performance overhead,")]),e._v(" "),t("li",[t("strong",[e._v("Complexity")]),e._v(": Implementing data binding and understanding reactive programming concepts can add complexity, especially for developers new to the pattern.\n"),t("img",{attrs:{src:a(299),alt:"An image"}})])]),e._v(" "),t("h2",{attrs:{id:"difference"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#difference"}},[e._v("#")]),e._v(" Difference")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("MVC")]),e._v(" "),t("th",[e._v("MVP")]),e._v(" "),t("th",[e._v("MVVM")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("One of the "),t("span",{staticStyle:{"background-color":"yellow"}},[e._v("oldest software architecture ")])]),e._v(" "),t("td",[e._v("Developed as "),t("span",{staticStyle:{"background-color":"yellow"}},[e._v("the second iteration")]),e._v(" of software architecture which is advance from MVC.")]),e._v(" "),t("td",[t("span",{staticStyle:{"background-color":"yellow"}},[e._v("Industry-recognized architecture")]),e._v(" pattern for applications.")])]),e._v(" "),t("tr",[t("td",[e._v("UI(View) and data-access mechanism(Model) are "),t("span",{staticStyle:{"background-color":"yellow"}},[e._v("tightly coupled. ")])]),e._v(" "),t("td",[e._v("It "),t("span",{staticStyle:{"background-color":"yellow"}},[e._v("resolves")]),e._v(" the problem of having a dependent View by using Presenter as a communication channel "),t("span",{staticStyle:{"background-color":"yellow"}},[e._v("between Model and View.")])]),e._v(" "),t("td",[e._v("This architecture pattern is more "),t("span",{staticStyle:{"background-color":"yellow"}},[e._v("event-driven")]),e._v(" as it uses "),t("span",{staticStyle:{"background-color":"yellow"}},[e._v("data binding")]),e._v(" and thus makes easy "),t("span",{staticStyle:{"background-color":"yellow"}},[e._v("separation")]),e._v(" of core business logic from the View.")])]),e._v(" "),t("tr",[t("td",[t("span",{staticStyle:{"background-color":"yellow"}},[e._v("Controller and View")]),e._v(" exist with the "),t("span",{staticStyle:{"background-color":"yellow"}},[e._v("one-to-many")]),e._v(" relationship. One Controller can select a different View based upon required operation.")]),e._v(" "),t("td",[e._v("The "),t("span",{staticStyle:{"background-color":"yellow"}},[e._v("one-to-one")]),e._v(" relationship exists between "),t("span",{staticStyle:{"background-color":"yellow"}},[e._v("Presenter and View")]),e._v(" as one Presenter class manages one View at a time.")]),e._v(" "),t("td",[e._v("Multiple View can be mapped with a single ViewModel and thus, the "),t("span",{staticStyle:{"background-color":"yellow"}},[e._v("one-to-many")]),e._v(" relationship exists between "),t("span",{staticStyle:{"background-color":"yellow"}},[e._v("View and ViewModel. ")])])]),e._v(" "),t("tr",[t("td",[e._v("The View has no knowledge about the Controller.")]),e._v(" "),t("td",[e._v("The View has references to the Presenter")]),e._v(" "),t("td",[e._v("The View has references to the ViewModel")])]),e._v(" "),t("tr",[t("td",[t("span",{staticStyle:{"background-color":"yellow"}},[e._v(" Difficult to make changes")]),e._v(" and modify the app features as the code layers are "),t("span",{staticStyle:{"background-color":"yellow"}},[e._v("tightly coupled. ")])]),e._v(" "),t("td",[e._v("Code layers are "),t("span",{staticStyle:{"background-color":"yellow"}},[e._v("loosely coupled")]),e._v(" and thus it is "),t("span",{staticStyle:{"background-color":"yellow"}},[e._v("easy to carry out modifications/changes")]),e._v(" in the application code.")]),e._v(" "),t("td",[t("span",{staticStyle:{"background-color":"yellow"}},[e._v("Easy to make changes")]),e._v(" in the application. However, if data binding logic is too complex, it will be a "),t("span",{staticStyle:{"background-color":"yellow"}},[e._v("little harder to debug")]),e._v(" the application.")])]),e._v(" "),t("tr",[t("td",[t("span",{staticStyle:{"background-color":"yellow"}},[e._v("User Inputs are handled by the Controller. ")])]),e._v(" "),t("td",[t("span",{staticStyle:{"background-color":"yellow"}},[e._v("The View is the entry point to the Application ")])]),e._v(" "),t("td",[t("span",{staticStyle:{"background-color":"yellow"}},[e._v("The View takes the input from the user and acts as the entry point of the application. ")])])]),e._v(" "),t("tr",[t("td",[e._v("Ideal for small scale projects only.")]),e._v(" "),t("td",[e._v("Ideal for simple and complex applications.")]),e._v(" "),t("td",[e._v("Not ideal for small scale projects.")])]),e._v(" "),t("tr",[t("td",[e._v("Limited support to Unit testing.")]),e._v(" "),t("td",[e._v("Easy to carry out Unit testing but a tight bond of View and Presenter can make it slightly difficult.")]),e._v(" "),t("td",[e._v("Unit testability is highest in this architecture.")])])])]),e._v(" "),t("p",[e._v("Generally, "),t("span",{staticStyle:{"background-color":"yellow"}},[e._v("MVC is suitable for web applications")]),e._v(" that need to support "),t("span",{staticStyle:{"background-color":"yellow"}},[e._v("multiple platforms, browsers,")]),e._v(" or devices, separating the logic and presentation layers. "),t("span",{staticStyle:{"background-color":"yellow"}},[e._v("MVP is ideal for desktop or mobile applications with a rich and interactive user interface")]),e._v(" that requires easy "),t("span",{staticStyle:{"background-color":"yellow"}},[e._v("testing and maintenance.")]),e._v(" Additionally, "),t("span",{staticStyle:{"background-color":"yellow"}},[e._v("MVVM is best for XAML-based applications")]),e._v(" that need a dynamic and "),t("span",{staticStyle:{"background-color":"yellow"}},[e._v("data-driven user interface")]),e._v(", leveraging data binding and event-driven features.")]),e._v(" "),t("h2",{attrs:{id:"reference"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reference"}},[e._v("#")]),e._v(" Reference")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://www.youtube.com/watch?v=I5c7fBgvkNY&ab_channel=ByteByteGo"}},[e._v("Everything You NEED to Know About Client Architecture Patterns(YouTube)")]),t("br")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.linkedin.com/advice/3/how-do-you-compare-contrast-mvc-mvp-mvvm"}},[e._v("How do you compare and contrast the MVC, MVP, and MVVM patterns for user interface design?(LinkedIn)")]),e._v(" "),t("br")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.masaischool.com/blog/comparing-software-architecture-patterns/#:~:text=MVC%2C%20MVVM%2C%20and%20MVP%20are,a%20Presenter%20to%20mediate%20interactions."}},[e._v("Comparing Software Architecture Patterns MVC Vs. MVVM Vs. MVP(Masai)")]),t("br")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.geeksforgeeks.org/difference-between-mvc-mvp-and-mvvm-architecture-pattern-in-android/?ref=header_search"}},[e._v("How do you compare and contrast the MVC, MVP, and MVVM patterns for user interface design?(geeksforgeeks)")])])]),e._v(" "),t("br"),e._v(" "),t("br"),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Let's make the world a better place together :)\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);